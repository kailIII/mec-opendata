<!--  
<div id="slide-panel">
    <div id="menu-content" class="tab-content">
        <div id="menuA" class="tab-pane fade in active">
            <div id="tab-1" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
                <h4>Departamento</h4>
                <select multiple id="departamento" style="width:250px;">                
                    <option value="Capital">Asunción</option>

                    <option value="Concepcion">Concepción</option>

                    <option value="San Pedro">San Pedro</option>
                </select>

                <h4>Distrito</h4>
                <select multiple id="distrito" style="width:250px;">
                </select>

                <h4>Programa</h4>
                <div id="programa" class="btn-group-vertical" data-toggle="buttons">
                </div>

                <h4>Estado de Obra</h4>
                <div id="estado" class="btn-group-vertical" data-toggle="buttons">
                </div>

            </div>
        </div>
    </div>
</div>
<div id="slide-tag">
    <a href="#" id="opener" class="btn btn-default"></span> Filtrar los Datos <span id="opener-icon" class="glyphicon glyphicon-chevron-down arrow-right"></a>
</div>
<div class="main-container">
    <div id='loader'></div>
    <div id="main-content" class="tab-content">
        <div id="mapa" class="tab-pane fade in active">
            <div id="map"></div>
        </div>
    </div>
</div>
-->

<%= form_tag mec_custom_url(app_mapa_establecimientos_url), :remote => true, :id => "form-mapa-establecimientos" do  %>
  <form id="for-mapa-establecimientos">
  Codigo Departamento:<br/>
  <input type="text" name="codigo_departamento">
  <br/>
  Departamento:<br/>
  <input type="text" name="nombre_departamento">
  <br/>
  Codigo Distrito:<br/>
  <input type="text" name="codigo_distrito">
  <br/>
  Distrito:<br/>
  <input type="text" name="nombre_distrito">
  <br/>
  Codigo Barrio/Localidad:<br/>
  <input type="text" name="codigo_barrio_localidad">
  <br/>
  Barrio/Localidad:<br/>
  <input type="text" name="nombre_barrio_localidad">
  <br/><br/>
  <input type="submit" value="Submit">
  <div id="mapa-establecimientos-lista">
</form>

<% end %>

<script>
  $(document).ready(function () {
    
    obtenerEstablecimientos();
    //clusterDepartamento();
    //clusterDistrito();
    //clusterBarrioLocalidad();
  });

  var obtenerEstablecimientos = function(){

    var tipo = {
      tipo:'1' //establecimientos
    };

    /*Llamada AJAX para el submit del form de filtros*/
    $.ajax(
    {
        url : 'http://localhost:3000/app/mapa_establecimientos/datos',
        type: "POST",
        data : tipo,
        dataType: 'json',
        headers: {'X-Requested-With': 'XMLHttpRequest'},
        success:function(data, textStatus, jqXHR) 
        {
            console.log('INDEX');
            console.log(JSON.parse(data[0].e_geojson));
        },
        error: function(jqXHR, textStatus, errorThrown) 
        {
            console.log(textStatus);
        }
    });

  };
  
  var clusterDepartamento = function(){
    
    var tipo = {
      tipo:'00' //cluster departamento
    };

    $.ajax({
      url: "http://localhost:3000/app/mapa_establecimientos",
      type: "GET",
      dataType: "json",
      data: tipo,
      success: function(result) {
        console.log(result);
      },
      error: function(jqXHR, textStatus, errorThrown){
        console.log(textStatus);
      }
    });

  };

  var clusterDistrito = function(){
    
    var tipo = {
      tipo:'0000' //cluster distrito
    };

    $.ajax({
      url: "http://localhost:3000/app/mapa_establecimientos",
      type: "GET",
      dataType: "json",
      data: tipo,
      success: function(result) {
        console.log(result);
      },
      error: function(jqXHR, textStatus, errorThrown){
        console.log(textStatus);
      }
    });

  };

  var clusterBarrioLocalidad = function(){
    
    var tipo = {
      tipo:'000000' //cluster barrio/localidad
    };

    $.ajax({
      url: "http://localhost:3000/app/mapa_establecimientos",
      type: "GET",
      dataType: "json",
      data: tipo,
      success: function(result) {
        console.log(result);
      },
      error: function(jqXHR, textStatus, errorThrown){
        console.log(textStatus);
      }
    });

  };

</script>

<script>

  /*$(document).ready(function () {
      var map = draw_map();
      draw_sidetag(map);
      add_filter_listeners(map);
  });*/

  function draw_map() {
      startLoading();

      L.mapbox.accessToken = 'pk.eyJ1IjoicnBhcnJhIiwiYSI6IkEzVklSMm8ifQ.a9trB68u6h4kWVDDfVsJSg';
      var layers = SMV.LAYERS();
      var mapbox = layers.MAPBOX.on('load', finishedLoading);
      var osm = layers.OPEN_STREET_MAPS.on('load', finishedLoading);

      var gglHybrid = layers.GOOGLE_HYBRID.on("MapObjectInitialized", setup_gmaps);
      var gglRoadmap = layers.GOOGLE_ROADMAP.on("MapObjectInitialized", setup_gmaps);


      var map = L.map('map', {maxZoom: 18, minZoom: 3, worldCopyJump: true, attributionControl: false})
              .setView([-23.388, -60.189], 7)
              .on('baselayerchange', startLoading);

      var baseMaps = {
          "Calles OpenStreetMap": osm,
          "Terreno": mapbox,
          "Satélite": gglHybrid,
          "Calles Google Maps": gglRoadmap
      };

      map.addLayer(gglRoadmap);

      var geoJson = L.mapbox.featureLayer();
      //var geoJson = L.mapbox.featureLayer(viviendas)

      geoJson.on('layeradd', function (e) {
          var marker = e.layer,
                  feature = marker.feature;

          var img = SMV.ESTADO_TO_ICON[feature.properties['Estado de Obra']];
          if (img) {
              marker.setIcon(L.icon({
                  iconUrl: img,
                  iconSize: [32, 32]
              }));
          }
      });

      geoJson.setGeoJSON(viviendas);

      var markers = new L.MarkerClusterGroup({minZoom: 6});
      markers.addLayer(geoJson);
      markers.on('click', draw_popup);

      map.addLayer(markers);
      SMV.markerLayer = markers;
      SMV.geoJsonLayer = geoJson;

      SMV.infoBox = draw_info_box();
      SMV.infoBox.addTo(map);
      L.control.layers(baseMaps).addTo(map);

      map.on('popupclose', function (e) {
          SMV.infoBox.update();
      });

      markers.on('clustermouseover', function (e) {
          var features = _.pluck(e.layer.getAllChildMarkers(), 'feature');
          SMV.infoBox.update(features);
      });

      markers.on('clustermouseout', function (e) {
          SMV.infoBox.update();
      });

      $('#opener').click();

      return map;
  }

  function setup_filters() {
      $("#departamento").select2();
      $("#distrito").select2();
      $("#localidad").select2();
  }

  function draw_info_box() {
      var info = L.control();

      info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info-box'); // create a div with a class "info"
          this.update();
          return this._div;
      };

      // method that we will use to update the control based on feature properties passed
      info.update = function (f) {
          var msg = this._div.innerHTML;
          if (f instanceof Array) {
              msg = get_summary_message(f);
          } else if (f) {
              msg = sprintf('Mostrando un asentamiento del proyecto %s con %s viviendas',
                      f.properties['Proyecto'], f.properties['Cantidad de Viviendas']);
          } else {
              var features = _(SMV.geoJsonLayer.getLayers()).map(function (l) {
                  return l.feature;
              });
              msg = get_summary_message(features);
          }

          this._div.innerHTML = msg;
      };

      return info;
  }

  function get_summary_message(features) {
      var cantidadDepartamentos = _(features).chain()
              .map(function (f) {
                  return f.properties['Departamento'];
              })
              .filter(function (e) {
                  return !(e === "Capital");
              })
              .unique().value().length;

      if (cantidadDepartamentos === 0) {
          cantidadDepartamentos += 1;
      }

      var cantidadProyectos = features.length;
      var cantidadViviendas = _(features).chain().filter(function (f) {
          return !isNaN(f.properties['Cantidad de Viviendas'])
      }).value()
              .reduce(function (cont, f) {
                  return cont + parseInt(f.properties['Cantidad de Viviendas'])
              }, 0);

      var departamentoLabel = cantidadDepartamentos > 1 ? 'departamentos' : 'departamento';
      var equivalenteLabel = cantidadProyectos > 1 ? 'equivalentes' : 'equivalente';
      var proyectoLabel = cantidadProyectos > 1 ? 'obras' : 'obra';
      var viviendaLabel = cantidadViviendas > 1 ? 'viviendas' : 'vivienda';
      return sprintf('%s %s de %s %s, %s a %s %s.',
              cantidadProyectos, proyectoLabel, cantidadDepartamentos, departamentoLabel, equivalenteLabel, cantidadViviendas, viviendaLabel);
  }

  function draw_sidetag(map) {
      $('#opener').on('click', function () {
          var panel = $('#slide-panel');
          if (panel.hasClass("visible")) {
              panel.removeClass('visible').css({'margin-left': '-300px'});
              $('.main-container').css({'padding-left': '0px'});
          } else {
              panel.addClass('visible').css({'margin-left': '0px'});
              $('.main-container').css({'padding-left': '300px'});
          }
          $('#opener-icon').toggleClass("glyphicon glyphicon-chevron-down");
          $('#opener-icon').toggleClass("glyphicon glyphicon-chevron-up");
          map.invalidateSize();
          return false;
      });
  }

  function draw_popup(target) {
      if (!!!target.layer.getPopup()) {
          var content = draw_popup_tabs(SMV.POPUP_ROWS);

          content += draw_popup_tables(target.layer.feature.properties, SMV.POPUP_ROWS);
          //content += draw_popup_album(["img/casa1.jpg", "img/plano1.png", "img/casa2.jpg", "img/plano2.png"]);
          var popup = new L.Popup({
              minWidth: 400,
              className: "marker-popup"
          }).setContent(content);
          target.layer.bindPopup(popup);
      }
      target.layer.openPopup();
      setup_modal();
      setup_contact_link(target.layer);
      SMV.infoBox.update(target.layer.feature);
      $('.flexslider').flexslider({
          animation: "slide"
      });
  }

  function setup_gmaps() {
      google.maps.event.addListenerOnce(this._google, 'tilesloaded', finishedLoading);
  }

  function add_filter_listeners(map) {
      $("#proyecto li input[value='Todos']").change(function () {
          var checked = $(this).prop('checked');
          $("#proyecto li input").prop('checked', this.checked);
      });

      $('#proyecto li input, #departamento, #distrito, #localidad').change(function () {
          update_filters(map);
      });

  }

  // This function is called whenever someone clicks on a checkbox and changes
  // the selection of markers to be displayed.
  function update_filters(map) {
      var proyectos = get_selected_checkbox('#proyecto li input');
      var departamentos = get_selected_combo('#departamento');
      console.log(map.featureLayer);

      SMV.geoJsonLayer.setFilter(function (feature) {
          // If this symbol is in the list, return true. if not, return false.
          // The 'in' operator in javascript does exactly that: given a string
          // or number, it says if that is in a object.
          // 2 in { 2: true } // true
          // 2 in { } // false
          var proyectoFilter = feature.properties['proyecto'] in proyectos;
          var departamentoFilter = $.isEmptyObject(departamentos) || feature.properties['departamento'] in departamentos;

          var showMarker = departamentoFilter;

          return (showMarker);
      });

      SMV.markerLayer.clearLayers();
      SMV.markerLayer.addLayer(SMV.geoJsonLayer);
  }

  function get_selected_checkbox(selector) {
      var checkboxes = $(selector);
      var enabled = {};
      // Run through each checkbox and record whether it is checked. If it is,
      // add it to the object of types to display, otherwise do not.
      for (var i = 0; i < checkboxes.length; i++) {
          if (checkboxes[i].checked)
              enabled[checkboxes[i].value] = true;
      }
      return enabled;
  }

  function get_selected_combo(selector) {
      var value = $(selector).select2('val');
      var enabled = {};
      // Run through each checkbox and record whether it is checked. If it is,
      // add it to the object of types to display, otherwise do not.
      for (var i = 0; i < value.length; i++) {
          enabled[value[i]] = true;
      }
      return enabled;
  }

  function setup_contact_link(layer) {
      $('#contact-link').click(function () {
          SMV.feature = layer.feature;
          layer.closePopup();
          $('#tab-contacto a')[0].click();
          var table = draw_popup_table(layer.feature.properties, SMV.TABLE_COLUMNS, 'form-table');
          var content = "<h4>Datos del Proyecto</h4>" + table;
          $("#proyecto-wrapper").html(content);
      });
  }

  function draw_popup_tables(properties, attrs_by_tab) {
      var d = '<div class="tab-content">';
      var c = 0;
      for (key in attrs_by_tab) {
          if (attrs_by_tab.hasOwnProperty(key)) {
              var id = removeAccents(key.toLowerCase().split(" ").join("-"));
              if (c === 0) {
                  d += sprintf('<div class="tab-pane active" id="%s">', id);
                  //d += draw_popup_album(["img/casa1.jpg", "img/plano1.png", "img/casa2.jpg", "img/plano2.png"]);
                  var imgs = SMV.ROW_TO_IMGS[properties.id.toString()] || ['./static/img/numerados/default.jpg'];
                  if (imgs) {
                      d += draw_popup_album(imgs);
                  }
              } else {
                  d += sprintf('<div class="tab-pane" id="%s">', id);
              }

              d += draw_popup_table(properties, attrs_by_tab[key], 'popup-table');
              if (key === 'Detalles') {
                  d += '<p>¿Querés hacer un comentario, sugerencia o denuncia sobre esta obra? \
          ¡Escribínos haciendo click <a id="contact-link" href"#">aquí</a>!</p>'
              }
              d += "</div>";
              c++;
          }
      }
      d += "</div>";
      return d;
  }

  function draw_popup_table(properties, attrs, clazz) {
      var customClass = clazz || '';
      var t = sprintf("<table class=\'table table-striped table-condensed %s\'><tbody>", customClass);
      for (var i = 0; i < attrs.length; i++) {
          var key = attrs[i];
          if (properties.hasOwnProperty(key)) {
              t += draw_popup_table_row(key, properties[key]);
          }
      }
      t += "</tbody></table>";
      return t;
  }

  function draw_popup_tabs(tabs) {
      var r = '<ul class="nav nav-tabs" role="tablist">'
      var c = 0
      for (k in tabs) {
          if (tabs.hasOwnProperty(k)) {
              var href = removeAccents(k.toLowerCase().split(" ").join("-"));
              if (c == 0) {
                  r += sprintf('<li class="active"><a href="#%s" role="tab" data-toggle="tab">%s</a></li>', href, k);
              } else {
                  r += sprintf('<li><a href="#%s" role="tab" data-toggle="tab">%s</a></li>', href, k);
              }
              c++;
          }
      }
      r += '</ul>'
      return r;
  }

  function draw_popup_table_row(key, value) {
      return sprintf("<tr><td class=\'attr-title\'>%s</td><td>%s</td></tr>", SMV.ATTR_TO_LABEL[key], value);
  }

  function draw_popup_album(imgs) {
      var a = "<div id=\'album-container\' class=\'flexslider\'><ul class=\'slides row\'>";
      for (var i = 0; i < imgs.length; i++) {
          var thumbArray = imgs[i].split('.');
          var thumbName = thumbArray.slice(0, thumbArray.length - 1).join('.');
          var thumbExtension = thumbArray[thumbArray.length - 1];
          a += draw_popup_album_photo(thumbName + '.thumbnail.' + thumbExtension);
      }
      a += "</ul></div>"
      return a;
  }

  function draw_popup_album_photo(img) {
      return sprintf("<li><img class=\'img-responsive\' src=\'%s\'/></li>", img);
  }

  function setup_modal() {
      $("#headerPreview").modal('show').css(
              {
                  'margin-top': function () {
                      return -($(this).height() / 2);
                  },
                  'margin-left': function () {
                      return -($(this).width() / 2);
                  }
              })

      $('li img').on('click', function () {
          var src = get_image_path($(this).attr('src'));
          //console.log(src);
          var img = '<img src="' + src + '" class="img-responsive"/>';

          var index = $(this).parent('li').index();

          var html = '';
          html += img;
          html += '<div style="height:25px;clear:both;display:block;">';
          html += '<a class="controls next" href="' + (index + 2) + '">siguiente &raquo;</a>';
          html += '<a class="controls previous" href="' + (index) + '">&laquo; anterior</a>';
          html += '</div>';

          $('#photo-modal').modal();
          $('#photo-modal').on('shown.bs.modal', function () {
              $('#photo-modal .modal-body').html(html);
              //this will hide or show the right links:
              $('a.controls').trigger('click');
          });
          $('#photo-modal').on('hidden.bs.modal', function () {
              $('#photo-modal .modal-body').html('');
          });
      });
  }

  function get_image_path(thumbnail) {
      var thumbArray = thumbnail.split('.');
      return thumbArray.slice(0, thumbArray.length - 2).join('.') + '.' + thumbArray[thumbArray.length - 1];
  }

  function setup_modal_navigation() {
      $(document).on('click', 'a.controls', function (e) {
          var index = $(this).attr('href');
          var src = $('ul.row li:nth-child(' + (index) + ') img').attr('src');
          src = get_image_path(src);
          $('.modal-body img').attr('src', src);

          var newPrevIndex = parseInt(index) - 1;
          var newNextIndex = parseInt(newPrevIndex) + 2;

          if ($(this).hasClass('previous')) {
              $(this).attr('href', newPrevIndex);
              $('a.next').attr('href', newNextIndex);
          } else {
              $(this).attr('href', newNextIndex);
              $('a.previous').attr('href', newPrevIndex);
          }

          var total = ($('ul.row li').length);

          //hide next button
          if (total === newNextIndex) {
              $('a.next').hide();
          } else {
              $('a.next').show()
          }
          //hide previous button
          if (newPrevIndex === 1) {
              $('a.previous').hide();
          } else {
              $('a.previous').show();
          }

          return false;
      });
  }

  function startLoading() {
      var spinner = new Spinner({
          color: "#8c0505",
          radius: 30,
          width: 15,
          length: 20
      }).spin();
      $("#loader").removeClass().append(spinner.el);
  }

  function finishedLoading() {
      // first, toggle the class 'done', which makes the loading screen
      // fade out
      var loader = $("#loader");
      loader.addClass('done');
      setTimeout(function () {
          // then, after a half-second, add the class 'hide', which hides
          // it completely and ensures that the user can interact with the
          // map again.
          loader.addClass('hide');
          loader.empty();
      }, 200);
  }

  /*Utilitario para eliminar acentos de la cadena, para poder comparar las claves
   (nombre del departamento) del servicio (BD) con las del GEOJSON*/
  function removeAccents(strAccents) {
      var strAccents = strAccents.split('');
      var strAccentsOut = new Array();
      var strAccentsLen = strAccents.length;
      var accents = 'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñÿý';
      var accentsOut = "AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz";
      for (var y = 0; y < strAccentsLen; y++) {
          if (accents.indexOf(strAccents[y]) != -1) {
              strAccentsOut[y] = accentsOut.substr(accents.indexOf(strAccents[y]), 1);
          } else
              strAccentsOut[y] = strAccents[y];
      }
      strAccentsOut = strAccentsOut.join('');
      return strAccentsOut;
  }
</script>

<style>

    @media (max-width: 1200px) {
        #slide-panel {
            height: 55% !important;
            height: calc(100% - 414px) !important;
        }
    }
    @media (max-width: 768px) {
        #slide-panel {
            height: 60% !important;
            height: calc(100% - 414px) !important;
        }
    }
    #slide-tag{
        float: left;
        width: 300px;
        margin-left: -300px;
    }
    #slide-panel {
        width:300px;
        height:86%;
        height: calc(100% - 114px);
        padding-top: 15px;
        background: #e7e7e7;
        margin-left:-300px;
        float: left;
        max-width: 300px;
        position: absolute;
        z-index: 2;
        -moz-box-shadow:    inset 0 0 10px #000000;
        -webkit-box-shadow: inset 0 0 10px #000000;
        box-shadow:         inset 0 0 10px #000000;
        overflow: auto;
    }
    #opener {
        float:right;
        margin-right: -90px;
        margin-top: 100%;
        z-index: 2;
        position: relative;
        -ms-transform:rotate(270deg); /* IE 9 */
        -moz-transform:rotate(270deg); /* Firefox */
        -webkit-transform:rotate(270deg); /* Safari and Chrome */
        -o-transform:rotate(270deg); /* Opera */
        border-top: none;
    }
    #opener-icon{
        padding-left: 5px;
    }
    .glyphicon-chevron-down{
        vertical-align: middle;
    }
    #opener-icon{
        padding-left: 5px;
    }
    .tab-content > .tab-pane {
        display: none;
    }
    .tab-content > .active {
        display: block;
    }
    .popup-table{
        margin-top: 50px;
        font-size: 12px;
    }
    .popup-table .attr-title{
        font-weight: bold;
    }
    .info-box{
        background-color: #fff;
        border: 1px solid #999;
        border-color: rgba(0,0,0,.4);
        border-radius: 3px;
        box-shadow: none;
        padding: 0 10px 0 10px;
        font-family: 'open_sansregular', Helvetica, Arial, sans-serif;
        font-size: 16px;
    }
    #loader {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
        background:rgba(255, 255, 255, 0.6);
        transition:background 1s ease-out;
        -webkit-transition:background 1s ease-out;
        z-index: 10000;
    }
    #loader.done {
        background:rgba(255, 255, 255, 0);
    }

    #loader.hide {
        display:none;
    }
    #map {
        height:500px;
        width:100%;
    }
</style>
<!--<script>
  L.mapbox.accessToken = 'pk.eyJ1Ijoic2ViYXN0aWFub3J0aXpzYW50YWNydXoiLCJhIjoiMEhXbGVpVSJ9.sYb1WHM-9_bdXsA5JCGmGQ';
  var map = L.mapbox.map('map', 'examples.map-i86nkdio')
          .setView([40, -74.50], 9);
</script>-->